・カスタムフック：ロジックと画面の分離を責務とする
　業務ロジックに対して一対一で作る



・ビジネスロジック：業務固有の処理を行うことを責務とする
　カスタムフックからのみ呼ばれて、API通信時はApiリクエスト処理を呼び出す。
　レスポンスの処理（データ操作を行う）
　画面単位でファイル分割をする



・Apiリクエスト：APIリクエスト処理をまとめることを責務とする
　Apiクライアントを使ってリクエスト処理を作成する（リクエストデータの成型も行う）
　機能ごとにファイル分割を行う。



・APIクライアント：通信実行を責務とする
　URLとリクエストパラメータを受け取ってリクエスト実行



・エラーハンドリング
APIクライアント層： 通信・ネットワークレベルのエラー処理

APIリクエスト層： レスポンスの業務的成功判定・エラー判定とエラー投げ直し

ビジネスロジック層： エラーを受けてユーザーへのフィードバックや画面制御、リトライなどの業務的対応


# ========================
# 開発用ステージ
# ========================
FROM node:18-alpine AS development

WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
CMD ["npm", "run", "dev"]

# ========================
# 本番ビルドステージ
# ========================
FROM node:18-alpine AS build

WORKDIR /app
COPY package*.json ./
RUN npm install --production
COPY . .
RUN npm run build

# ========================
# 本番実行ステージ
# ========================
FROM node:18-alpine AS production

WORKDIR /app
ENV NODE_ENV=production
COPY --from=build /app ./
EXPOSE 3000
CMD ["npm", "start"]


# ========================
# 開発用ステージ
# ========================
FROM node:18-alpine AS development

WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
CMD ["npm", "run", "start:dev"]

# ========================
# 本番ビルドステージ
# ========================
FROM node:18-alpine AS build

WORKDIR /app
COPY package*.json ./
RUN npm install --production
COPY . .
RUN npm run build

# ========================
# 本番実行ステージ
# ========================
FROM node:18-alpine AS production

WORKDIR /app
ENV NODE_ENV=production
COPY --from=build /app ./
CMD ["node", "dist/main"]


version: '3.9'
services:
  frontend:
    build:
      context: ./frontend
      target: ${APP_ENV}
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env.${APP_ENV}
    volumes:
      - ./frontend:/app
      - /app/node_modules

  backend:
    build:
      context: ./backend
      target: ${APP_ENV}
    ports:
      - "5000:3000"
    env_file:
      - ./backend/.env.${APP_ENV}
    volumes:
      - ./backend:/app
      - /app/node_modules
